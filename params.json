{"name":"NetGrafio","tagline":"netgrafio - Visualize your network","body":"# Introduction\r\n\r\nI love computer science and new technologies to play with. Besides that I like to keep things simple and pay attention\r\nto aspects that really mather. But I also like sharing my world and thoughts with people not involved in computer science.\r\nIn fact technology is not dehumanizing. It's what makes us human.\r\n\r\n\r\n### Why? Don't you have better things to do?\r\n\r\nThe whole project was basically a wish I had during some **network analysis**:\r\nI wanted to **visualize** my results in some fancier way. There were a lot of dependencies between several hosts\r\nand I'm not good at reading raw packet data. And since **graphs** are an excellent data structure to represent\r\n(computer) networks I've decided to begin my journey :smirk:\r\n\r\nDuring some [D3](http://d3js.org/) experiments  I wanted to capture data from the command line and send it to my D3 application.\r\nOf course I could have read the data from some CSV, JSON, whatever file but that wasn't \"real-time\" enough. So I had a\r\n\r\n* data source\r\n* D3 code applying some magic to the data\r\n\r\nThe *data source* in that case were some grep lines transformed to JSON data. In fact I was missing the\r\nlinking part between mentioned components.\r\n\r\n\r\n### D3? Never heard of!\r\n\r\n**D3** stands for Data-Driven Documents. Its basically a **JavaScript** library aimed to manipulate \"documents based on data\".\r\nA neat side-effect of using JavaScript: You can use a **browser** to visualize your data. No need for extra GUI, clients whatever.\r\nThere are douzens of useful examples how to use D3, especially force layouts which are ment to implement graphs.\r\n\r\n# Meet netgrafio!\r\n\r\n**netgrafio** provides more or less tools and libraries to visualize your data regardless of its type.\r\nI tried to make the libraries OOP-friendly but as you may know: JS and OOP is really a pain.\r\nIn fact I had to code a lot of JS (for the first time in my life as a coder:D).\r\nIts not perfect and it might be buggy. But it works for me :v:\r\n\r\n![netgrafio-first-page.png](http://dl.dornea.nu/img/netgrafio/netgrafio-first-page.png)\r\n\r\n## Documentation\r\n\r\nMake sure you'll have a look at the official documentation available at [http://netgrafio.readthedocs.org/](http://netgrafio.readthedocs.org/).\r\n\r\n\r\n### Screenshots\r\n\r\n![netgrafio-module-analysis.png](http://dl.dornea.nu/img/netgrafio/netgrafio-module-analysis.png)\r\nThe network analysis module.\r\n\r\n![netgrafio-module-nmap.png](http://dl.dornea.nu/img/netgrafio/netgrafio-module-nmap-results.png)\r\nVisualize nmap results.\r\n\r\n### Videos\r\n\r\n[![netgrafio - traceroute module](http://img.youtube.com/vi/TpgvQqtE0vU/0.jpg)](https://www.youtube.com/watch?v=TpgvQqtE0vU)\r\n\r\n[![netgrafio - network analysis module](http://img.youtube.com/vi/GgKKr3pH1go/0.jpg)](https://www.youtube.com/watch?v=GgKKr3pH1go)\r\n\r\n[![netgrafio - nmap results module](http://img.youtube.com/vi/5XhawZkFd-8/0.jpg)](https://www.youtube.com/watch?v=5XhawZkFd-8)\r\n\r\n\r\n### Basic idea\r\n\r\n*netgrafio* listens for some data on a **TCP** socket and passes it through some **WebSocket** to all connected web clients.\r\nThe web clients have some JS code which will receive the incoming data and apply some magic to it.\r\n\r\n> At the moment only JSON data is supported.\r\n\r\nIn order to transfer data from one socket to the another a (deadlock free) queue is being used (**producer and consumer pattern**).\r\n\r\n\r\n### Run me\r\n\r\n> All the relevant steps are shown in this [showterm](http://showterm.io/819e4458f5c3b43c84e8d).\r\n\r\n\r\n#### System requirements\r\n\r\nIn order to run netgrafio several requirements on your system have to be met. Basically you'll need:\r\n\r\n* Python 3.x\r\n* [virtualenv](http://www.virtualenv.org)\r\n* [PIP](http://www.pip-installer.org/)\r\n\r\n\r\n#### Clone project\r\n\r\nMake sure you have installed these packages on your system. Afterwards you can clone this project:\r\n\r\n```bash\r\n$ git clone https://github.com/nullsecuritynet/netgrafio\r\n$ cd netgrafio\r\n```\r\n\r\n#### Setup virtualenv\r\n\r\nNow you'll need to setup a isolated python environment using *virtualenv*:\r\n\r\n```bash\r\n$ virtualenv env\r\nUsing base prefix '/usr'\r\nNew python executable in env/bin/python3\r\nAlso creating executable in env/bin/python\r\nInstalling setuptools, pip...done.\r\n```\r\n\r\nMake sure to activate the virtual environment:\r\n\r\n```bash\r\n$ source env/bin/activate\r\n```\r\n\r\n\r\n#### Install additional packages\r\n\r\nHaving set the virtualenv environment let's install some missing packages:\r\n\r\n```bash\r\n$ pip install -r env/requirements.pip\r\n```\r\n\r\n\r\n#### Fire up netgrafio\r\n\r\nNow you're ready to start netgrafion and have some fun.\r\n\r\nThese are the basic parameters:\r\n\r\n```bash\r\npython netgrafio.py -h\r\nusage: netgrafio.py [-h] [--tcp-port TCP_PORT] [--ws-port WS_PORT]\r\n                    [--web-port WEB_PORT] [--host HOST]\r\n\r\nnetgrafio - visualize your network\r\n\r\noptional arguments:\r\n  -h, --help           show this help message and exit\r\n  --tcp-port TCP_PORT  Specify TCP port to listen for JSON packets (default:\r\n                       8081)\r\n  --ws-port WS_PORT    Specify WebSocket port to send JSON data to (default:\r\n                       8080)\r\n  --web-port WEB_PORT  Specify web port to server web application (default:\r\n                       5000)\r\n  --host HOST          Specify host to bind socket on (default: 127.0.0.1)\r\n\r\n```\r\n\r\nIf you start netgrafio without any arguments, then you'll have a\r\n\r\n* *TCP-Socket* listening on port 8081\r\n* *WebSocket* listening on port 8080\r\n* *Web-Application* available at http://localhost:5000\r\n\r\n\r\n```bash\r\n$ python netgrafio.py\r\n2014-04-24 16:18:12,984 - INFO - [WebSocketServer] - Starting WebSocket server on port 8080\r\n2014-04-24 16:18:12,984 - INFO - [WebSocketServer] - Start collector server\r\n2014-04-24 16:18:12,985 - INFO - [WebSocketServer] - Waiting for incoming data ...\r\n2014-04-24 16:18:12,989 - INFO - [WebServer] - Listening on 5000\r\n2014-04-24 16:18:12,989 - INFO - [TCPServer] - Listening on 8081\r\n```\r\n\r\nNow open your browser and navigate to [http://localhost:5000](http://localhost:5000)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}